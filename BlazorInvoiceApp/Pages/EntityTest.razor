@page "/entitytest"
@using System.Security.Claims;
@inject AuthenticationStateProvider authstate
@inject IDbContextFactory<ApplicationDbContext> dbFactory
<h3>EntityTest</h3>

@if (invoices != null)
{
    <ul>
        @foreach (Invoice i in invoices)
        {
            <li>
                <ul>
                    <li>Id: @i.Id</li>
                    <li>Invoice Number: @i.InvoiceNumber</li>
                    <li>Customer Id: @i.CustomerId</li>
                    <li>Customer Name: @i.Customer?.Name</li>
                    <li>Invoice Terms Id: @i.InvoiceTermsId</li>
                    <li>Invoice Terms Id: @i.InvoiceTerms?.Name</li>
                    <li>Paid Amount: @i.Paid</li>
                    <li>Credit Amount: @i.Credit</li>
                    <li>Tax Rate: @i.TaxRate</li>
                    @foreach (InvoiceLineItem ili in i.InvoiceLineItems)
                    {
                        <li>
                            Line Item:
                            <ul>
                                <li>Id: @ili.Id</li>
                                <li>Description: @ili.Description</li>
                                <li>Unit Price: @ili.UnitPrice</li>
                                <li>Quantity: @ili.Quantity</li>
                                <li>Total Price: @ili.TotalPrice</li>
                            </ul>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
}



@code {

    private List<Invoice>? invoices = null;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState auth = await authstate.GetAuthenticationStateAsync();
        Claim? uid = 
        auth.User?.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier");
        if (uid is not null)
        {
            var context = await dbFactory.CreateDbContextAsync();
            string userid = uid.Value;

            // DELETE (clear out the tables)
            var customers_to_delete
                = await context.Customers.Where(c => c.UserId == userid).ToListAsync();
            foreach (Customer c in customers_to_delete)
                context.Customers.Remove(c);

            var invoiceterms_to_delete
                = await context.InvoiceTerms.Where(it => it.UserId == userid).ToListAsync();
            foreach (InvoiceTerms it in invoiceterms_to_delete)
                context.InvoiceTerms.Remove(it);

            var invoicelineitems_to_delete
                = await context.InvoicesLineItems.Where(ili => ili.UserId == userid).ToListAsync();
            foreach (InvoiceLineItem ili in invoicelineitems_to_delete)
                context.InvoicesLineItems.Remove(ili);

            var invoices_to_delete
                = await context.Invoices.Where(i => i.UserId == userid).ToListAsync();
            foreach (Invoice i in invoices_to_delete)
                context.Invoices.Remove(i);
            await context.SaveChangesAsync();


            Customer c1 = new Customer()
                {
                    UserId = userid,
                    Name = "Customer 1"
                };
            Customer c2 = new Customer()
                {
                    UserId = userid,
                    Name = "Customer 2"
                };
            Customer c3 = new Customer()
                {
                    UserId = userid,
                    Name = "Customer 3"
                };
            context.Customers.Add(c1);
            context.Customers.Add(c2);
            context.Customers.Add(c3);


            InvoiceTerms terms1 = new InvoiceTerms()
                {
                    UserId = userid,
                    Name = "Net 45"
                };
            context.InvoiceTerms.Add(terms1);


            Invoice i1 = new Invoice()
                {
                    InvoiceTermsId = terms1.Id,
                    UserId = userid,
                    Credit = 0.0,
                    CustomerId = c1.Id,
                    Paid = 0.0,
                    Description = "First Invoice",
                    TaxRate = 5.0,
                };
            Invoice i2 = new Invoice()
                {
                    InvoiceTermsId = terms1.Id,
                    UserId = userid,
                    Credit = 0.0,
                    CustomerId = c2.Id,
                    Paid = 0.0,
                    Description = "Second Invoice",
                    TaxRate = 5.0
                };

            Invoice i3 = new Invoice()
                {
                    InvoiceTermsId = terms1.Id,
                    UserId = userid,
                    Credit = 0.0,
                    CustomerId = c2.Id,
                    Paid = 0.0,
                    Description = "Third Invoice",
                    TaxRate = 5.0
                };
            context.Invoices.Add(i1);
            context.Invoices.Add(i2);
            context.Invoices.Add(i3);
            

            InvoiceLineItem ili1 = new InvoiceLineItem()
                {
                    InvoiceId = i1.Id,
                    UserId = userid,
                    Quantity = 4,
                    Description = "Computers",
                    UnitPrice = 555
                };
            InvoiceLineItem ili2 = new InvoiceLineItem()
                {
                    InvoiceId = i1.Id,
                    UserId = userid,
                    Quantity = 2,
                    Description = "Printers",
                    UnitPrice = 250,
                };
            InvoiceLineItem ili3 = new InvoiceLineItem()
                {
                    InvoiceId = i2.Id,
                    UserId = userid,
                    Quantity = 12,
                    Description = "Apples",
                    UnitPrice = 0.79
                };
            InvoiceLineItem ili4 = new InvoiceLineItem()
                {
                    InvoiceId = i2.Id,
                    UserId = userid,
                    Quantity = 5,
                    Description = "Oranges",
                    UnitPrice = 1.25
                };

            InvoiceLineItem ili5 = new InvoiceLineItem()
                {
                    InvoiceId = i3.Id,
                    UserId = userid,
                    Quantity = 20,
                    Description = "Stapler",
                    UnitPrice = 12.95
                };

            context.InvoicesLineItems.Add(ili1);
            context.InvoicesLineItems.Add(ili2);
            context.InvoicesLineItems.Add(ili3);
            context.InvoicesLineItems.Add(ili4);
            context.InvoicesLineItems.Add(ili5);
            await context.SaveChangesAsync();

            // change all of invoices for customer 2, adjust the tax rate
            List<Invoice> customer2invoices =
            await context.Invoices.Where(i => i.CustomerId == c2.Id).ToListAsync();

            foreach (Invoice i in customer2invoices)
            {
                i.TaxRate = 10;
            }
            await context.SaveChangesAsync();

            Customer? customer_to_change =
            await context.Customers.Where(c => c.Name == "Customer 2").FirstOrDefaultAsync();
            if (customer_to_change is not null)
            {
                customer_to_change.Name = "Test Customer 2";
                await context.SaveChangesAsync();
            }

            invoices =
            await context.Invoices.Where(i => i.CustomerId == c2.Id)
            .Include("Customer").Include("InvoiceTerms").Include("InvoiceLineItems")
            .ToListAsync();



        }
    }
}