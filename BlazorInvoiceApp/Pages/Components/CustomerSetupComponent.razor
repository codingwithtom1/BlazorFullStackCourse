@inject IRepositoryCollection repo
@inject AuthenticationStateProvider authstate

<h3>Customers</h3>
<AuthorizeView>
    <Authorized>
<div class="text-danger">@Message</div>
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Customer" Click="@InsertRow" Disabled=@(customerToInsert != null || customerToUpdate != null) />
<RadzenDataGrid @ref="customersGrid" AllowAlternatingRows="false" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@customers" TItem="CustomerDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset">
<Columns>
    <RadzenDataGridColumn TItem="CustomerDTO" Property="Name" Title="Name" Width="200px">
    <EditTemplate Context="customer">
        <RadzenTextBox @bind-Value="customer.Name" Style="width:100%; display: block" Name="Name" />
        <RadzenRequiredValidator Text="Name is Required" Component="Name" Popup="true" />
    </EditTemplate>
    
    </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="CustomerDTO" Context="customer" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="150px">
            <Template Context="customer">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(customer))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(customer))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="customer">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(customer))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(customer))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(customer))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

</Columns>
</RadzenDataGrid>
    </Authorized>
</AuthorizeView>

@code {

    List<CustomerDTO> customers = new();
    RadzenDataGrid<CustomerDTO>? customersGrid;

    string Message = string.Empty;
    CustomerDTO? customerToInsert;
    CustomerDTO? customerToUpdate;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState auth = await authstate.GetAuthenticationStateAsync();
        await repo.Customer.Seed(auth.User);
        await repo.Save();
        customers = await repo.Customer.GetAllMine(auth.User);
    }

    async Task EditRow(CustomerDTO customer)
    {
        Message = "";
        customerToUpdate = customer;
        await customersGrid!.EditRow(customer);
    }

    async Task OnUpdateRow(CustomerDTO customer)
    {
        AuthenticationState auth = await authstate.GetAuthenticationStateAsync();
        Reset();
        await repo.Customer.UpdateMine(auth.User, customer);
        await repo.Save();
    }

    async Task SaveRow(CustomerDTO customer)
    {
        Message = "";
        await customersGrid!.UpdateRow(customer);
    }

    void CancelEdit(CustomerDTO customer)
    {
        Reset();
        customersGrid!.CancelEditRow(customer);
    }

    async Task DeleteRow(CustomerDTO customer)
    {
        AuthenticationState auth = await authstate.GetAuthenticationStateAsync();
        Reset();
        try
        {
            bool found = await repo.Customer.DeleteMine(auth.User, customer.Id);
            if (found)
            {
                await repo.Save();
                await repo.Customer.Seed(auth.User);
                await repo.Save();

                this.customers = await repo.Customer.GetAllMine(auth.User);
                await customersGrid!.Reload();
            }
            else
            {
                customersGrid!.CancelEditRow(customer);
                await customersGrid!.Reload();
            }
        }
        catch (RepositoryDeleteException)
        {
            // can't delete because would break integrity!
            Message = "Can't delete selected Customer, it is being used by an invoice.";
        }
    }

    async Task InsertRow()
    {
        Message = "";
        customerToInsert = new CustomerDTO();
        await customersGrid!.InsertRow(customerToInsert);
    }

    async Task OnCreateRow(CustomerDTO customer)
    {
        AuthenticationState auth = await authstate.GetAuthenticationStateAsync();
        customer.Id = await repo.Customer.AddMine(auth.User, customer);
        await repo.Save();
        this.customers = await repo.Customer.GetAllMine(auth.User);
        customerToInsert = null;
    }

    void Reset()
    {
        Message = "";
        customerToInsert = null;
        customerToUpdate = null;
    }
}
